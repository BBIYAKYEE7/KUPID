// ?∏ÏÖò ?Ä?¥Î®∏ Í¥ÄÎ¶?
class SessionTimer {
    constructor() {
        this.sessionTimeout = 60 * 60 * 1000; // 60Î∂ÑÏúºÎ°??∞Ïû•
        this.warningTime = 10 * 60 * 1000; // 10Î∂???Í≤ΩÍ≥†Î°??∞Ïû•
        this.startTime = Date.now();
        this.timer = null;
        this.countdownTimer = null;
        
        this.init();
    }
    
    init() {
        this.updateTimer();
        this.startTimer();
        this.bindEvents();
    }
    
    startTimer() {
        this.timer = setInterval(() => {
            this.updateTimer();
        }, 1000);
    }
    
    updateTimer() {
        const elapsed = Date.now() - this.startTime;
        const remaining = this.sessionTimeout - elapsed;
        
        if (remaining <= 0) {
            this.showSessionExpired();
            return;
        }
        
        const minutes = Math.floor(remaining / 60000);
        const seconds = Math.floor((remaining % 60000) / 1000);
        const timeString = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        
        // ?Ä?¥Î®∏ ?çÏä§???ÖÎç∞?¥Ìä∏
        const timerElement = document.getElementById('session-timer');
        if (timerElement) {
            timerElement.textContent = `?∏ÏÖò: ${timeString}`;
        }
        
        // ?ÑÎ°úÍ∑∏Î†à??Î∞??ÖÎç∞?¥Ìä∏
        const progressElement = document.getElementById('session-progress-bar');
        if (progressElement) {
            const progress = (remaining / this.sessionTimeout) * 100;
            progressElement.style.width = `${progress}%`;
            
            // Í≤ΩÍ≥† ?ÅÌÉú???∞Î•∏ ?âÏÉÅ Î≥ÄÍ≤?
            progressElement.className = 'session-progress-fill';
            timerElement.className = 'session-timer';
            
            if (remaining <= this.warningTime) {
                progressElement.classList.add('warning');
                timerElement.classList.add('warning');
            }
            
            if (remaining <= 60000) { // 1Î∂??¥Ìïò
                progressElement.classList.add('danger');
                timerElement.classList.add('danger');
            }
        }
        
        // Í≤ΩÍ≥† Î™®Îã¨ ?úÏãú
        if (remaining <= this.warningTime && remaining > this.warningTime - 1000) {
            this.showWarningModal();
        }
    }
    
    showWarningModal() {
        const modal = document.getElementById('session-warning-modal');
        const countdownElement = document.getElementById('countdown');
        
        if (modal && !modal.classList.contains('visible')) {
            modal.classList.remove('hidden');
            modal.classList.add('visible');
            
            // Ïπ¥Ïö¥?∏Îã§???úÏûë
            let countdown = 600; // 10Î∂?
            this.countdownTimer = setInterval(() => {
                const minutes = Math.floor(countdown / 60);
                const seconds = countdown % 60;
                countdownElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                
                if (countdown <= 0) {
                    this.hideWarningModal();
                    this.showSessionExpired();
                }
                countdown--;
            }, 1000);
        }
    }
    
    hideWarningModal() {
        const modal = document.getElementById('session-warning-modal');
        if (modal) {
            modal.classList.add('hidden');
            modal.classList.remove('visible');
        }
        
        if (this.countdownTimer) {
            clearInterval(this.countdownTimer);
            this.countdownTimer = null;
        }
    }
    
    showSessionExpired() {
        this.stopTimer();
        
        // ?∏ÏÖò ÎßåÎ£å ?åÎ¶º
        if (window.electronAPI) {
            window.electronAPI.resetSessionTimer();
        }
        
        // Î™®Îã¨ ?úÏãú
        const modal = document.getElementById('session-warning-modal');
        const modalContent = modal.querySelector('.modal-content');
        const modalHeader = modal.querySelector('.modal-header h3');
        const modalBody = modal.querySelector('.modal-body p');
        const countdownElement = document.getElementById('countdown');
        const extendBtn = document.getElementById('extend-session-btn');
        
        modalHeader.textContent = '?∏ÏÖò ÎßåÎ£å';
        modalBody.textContent = '?∏ÏÖò??ÎßåÎ£å?òÏóà?µÎãà?? Í≥†Î†§?Ä?ôÍµê ?¨ÌÑ∏Î°??§Ïãú ?¥Îèô?©Îãà??';
        countdownElement.textContent = 'ÎßåÎ£å??;
        extendBtn.textContent = '?¨ÌÑ∏Î°??¥Îèô';
        
        modal.classList.remove('hidden');
        modal.classList.add('visible');
    }
    
    resetTimer() {
        this.startTime = Date.now();
        this.hideWarningModal();
        
        // ?Ä?¥Î®∏ ?ÅÌÉú Ï¥àÍ∏∞??
        const timerElement = document.getElementById('session-timer');
        const progressElement = document.getElementById('session-progress-bar');
        
        if (timerElement) {
            timerElement.className = 'session-timer';
        }
        if (progressElement) {
            progressElement.className = 'session-progress-fill';
        }
        
        // Electron APIÎ•??µÌï¥ Î©îÏù∏ ?ÑÎ°ú?∏Ïä§ ?Ä?¥Î®∏???¨ÏÑ§??
        if (window.electronAPI) {
            window.electronAPI.resetSessionTimer();
        }
    }
    
    stopTimer() {
        if (this.timer) {
            clearInterval(this.timer);
            this.timer = null;
        }
        if (this.countdownTimer) {
            clearInterval(this.countdownTimer);
            this.countdownTimer = null;
        }
    }
    
    bindEvents() {
        // ?àÎ°úÍ≥†Ïπ® Î≤ÑÌäº
        const refreshBtn = document.getElementById('refresh-btn');
        if (refreshBtn) {
            refreshBtn.addEventListener('click', () => {
                const webview = document.getElementById('portal-webview');
                if (webview) {
                    webview.reload();
                }
            });
        }
        
        // ?àÏúºÎ°?Î≤ÑÌäº
        const homeBtn = document.getElementById('home-btn');
        if (homeBtn) {
            homeBtn.addEventListener('click', () => {
                const webview = document.getElementById('portal-webview');
                if (webview) {
                    webview.loadURL('https://portal.korea.ac.kr/front/Main.kpd');
                }
            });
        }
        
        // ?∏ÏÖò ?∞Ïû• Î≤ÑÌäº
        const extendBtn = document.getElementById('extend-session-btn');
        if (extendBtn) {
            extendBtn.addEventListener('click', () => {
                this.resetTimer();
                this.hideWarningModal();
            });
        }
        
        // Î™®Îã¨ ?´Í∏∞ Î≤ÑÌäº
        const closeBtn = document.getElementById('close-modal-btn');
        if (closeBtn) {
            closeBtn.addEventListener('click', () => {
                this.hideWarningModal();
            });
        }
        
        // ?πÎ∑∞ ?¥Î≤§??
        const webview = document.getElementById('portal-webview');
        if (webview) {
            webview.addEventListener('did-start-loading', () => {
                // ?òÏù¥ÏßÄ Î°úÎî© ?úÏûë ???Ä?¥Î®∏ ?¨ÏÑ§??
                this.resetTimer();
            });
            
            webview.addEventListener('did-finish-load', () => {
                // ?òÏù¥ÏßÄ Î°úÎî© ?ÑÎ£å ???Ä?¥Î®∏ ?¨ÏÑ§??
                this.resetTimer();
            });
            
            webview.addEventListener('did-navigate', () => {
                // ?§ÎπÑÍ≤åÏù¥?????Ä?¥Î®∏ ?¨ÏÑ§??
                this.resetTimer();
            });
        }
        
        // ?¨Ïö©???úÎèô Í∞êÏ?
        document.addEventListener('mousedown', () => this.resetTimer());
        document.addEventListener('mousemove', () => this.resetTimer());
        document.addEventListener('keypress', () => this.resetTimer());
        document.addEventListener('scroll', () => this.resetTimer());
        document.addEventListener('touchstart', () => this.resetTimer());
        document.addEventListener('click', () => this.resetTimer());
        
        // ?πÎ∑∞ ?¥Î? ?úÎèô??Í∞êÏ?
        const webviewElement = document.getElementById('portal-webview');
        if (webviewElement) {
            webviewElement.addEventListener('dom-ready', () => {
                webviewElement.addEventListener('mousedown', () => this.resetTimer());
                webviewElement.addEventListener('mousemove', () => this.resetTimer());
                webviewElement.addEventListener('keypress', () => this.resetTimer());
                webviewElement.addEventListener('scroll', () => this.resetTimer());
                webviewElement.addEventListener('click', () => this.resetTimer());
            });
        }
    }
}

// ?êÎèô Î°úÍ∑∏??Í¥ÄÎ¶??¥Îûò??
class AutoLoginManager {
    constructor() {
        this.config = null;
        this.loginSuccess = false; // Î°úÍ∑∏???±Í≥µ ?ÅÌÉú Ï∂îÏ†Å
        this.init();
    }
    
    async init() {
        if (window.electronAPI) {
            this.config = await window.electronAPI.getLoginConfig();
            this.bindEvents();
            

                }, 500);
            } else {
                // ?êÎèô Î°úÍ∑∏?∏Ïù¥ ?úÏÑ±?îÎêò???àÏúºÎ©??§Ìñâ
                if (this.config.autoLogin && this.config.username && this.config.password) {
                    this.performAutoLogin();
                }
            }
        }
    }
    
    bindEvents() {
        // Î°úÍ∑∏???§Ï†ï Î≤ÑÌäº
        const loginSettingsBtn = document.getElementById('login-settings-btn');
        if (loginSettingsBtn) {
            loginSettingsBtn.addEventListener('click', () => {
                console.log('Î°úÍ∑∏???§Ï†ï Î≤ÑÌäº ?¥Î¶≠??);

            });
        }
        
        // ?ÖÎç∞?¥Ìä∏ Î≤ÑÌäº
        const updateBtn = document.getElementById('update-btn');
        if (updateBtn) {
            updateBtn.addEventListener('click', () => {
                console.log('?ÖÎç∞?¥Ìä∏ Î≤ÑÌäº ?¥Î¶≠??);
                this.checkForUpdates();
            });
        }
        

        }
    }
    
    hideLoginSettingsModal() {

        }
    }
    
    async saveLoginSettings() {

    }
    
    async performAutoLogin() {
        // ?¥Î? Î°úÍ∑∏???±Í≥µ??Í≤ΩÏö∞ Ï§ëÎã® (?? Login.kpd ?òÏù¥ÏßÄ?êÏÑú??Î¶¨ÏÖã)
        if (this.loginSuccess) {
            // ?ÑÏû¨ ?òÏù¥ÏßÄÍ∞Ä Î°úÍ∑∏???òÏù¥ÏßÄ?∏Ï? ?ïÏù∏
            const webview = document.getElementById('portal-webview');
            if (webview) {
                const currentURL = webview.getURL();
                if (currentURL.includes('Login.kpd')) {
                    console.log('Î°úÍ∑∏?????¨Í∞êÏßÄ, ?ÅÌÉú Î¶¨ÏÖã ???êÎèô Î°úÍ∑∏???¨Ïãú??);
                    this.loginSuccess = false; // ?ÅÌÉú Î¶¨ÏÖã
                } else {
                    console.log('?¥Î? Î°úÍ∑∏???±Í≥µ ?ÅÌÉú, ?êÎèô Î°úÍ∑∏??Ï§ëÎã®');
                    return;
                }
            } else {
                console.log('?¥Î? Î°úÍ∑∏???±Í≥µ ?ÅÌÉú, ?êÎèô Î°úÍ∑∏??Ï§ëÎã®');
                return;
            }
        }
        
        if (!this.config || !this.config.username || !this.config.password) {
            return;
        }
        
        console.log('?åÎçî?¨Ïóê???êÎèô Î°úÍ∑∏???úÎèÑ:', this.config.username);
        
        // ?†Ïãú ?ÄÍ∏????êÎèô Î°úÍ∑∏???§Ìñâ
        setTimeout(async () => {
            // ?§Ïãú ??Î≤??±Í≥µ ?ÅÌÉú ?ïÏù∏
            if (this.loginSuccess) {
                console.log('Î°úÍ∑∏???±Í≥µ ?ÅÌÉú ?ïÏù∏?? ?êÎèô Î°úÍ∑∏??Ï§ëÎã®');
                return;
            }
            
            if (window.electronAPI) {
                const result = await window.electronAPI.triggerAutoLogin();
                
                if (result && result.success) {
                    console.log('?êÎèô Î°úÍ∑∏???±Í≥µ:', result.message);
                    this.loginSuccess = true; // ?±Í≥µ ?ÅÌÉú ?Ä??
                    return;
                } else {
                    console.error('?êÎèô Î°úÍ∑∏???§Ìå®:', result ? result.message : '?????ÜÎäî ?§Î•ò');
                    // ?§Ìå® ????Î≤àÎßå ???úÎèÑ (?±Í≥µ?òÏ? ?äÏ? Í≤ΩÏö∞?êÎßå)
                    if (!this.loginSuccess) {
                        setTimeout(() => {
                            this.performAutoLogin();
                        }, 2000); // 2Ï¥????¨Ïãú??
                    }
                }
            }
        }, 1000);
    }
    
    // ?ÖÎç∞?¥Ìä∏ Í¥Ä??Î©îÏÑú?úÎì§
    async checkForUpdates() {
        if (window.electronAPI) {
            try {
                const result = await window.electronAPI.checkForUpdates();
                if (result && result.success && result.result) {
                    console.log('?ÖÎç∞?¥Ìä∏ Î∞úÍ≤¨:', result.result);
                    
                    // ?¨Ïö©?êÏóêÍ≤??ÖÎç∞?¥Ìä∏ ?åÎ¶º
                    const shouldDownload = confirm(
                        `?àÎ°ú??Î≤ÑÏ†Ñ??Î∞úÍ≤¨?òÏóà?µÎãà??\n\n` +
                        `?ÑÏû¨ Î≤ÑÏ†Ñ: ${result.result.version}\n` +
                        `??Î≤ÑÏ†Ñ: ${result.result.version}\n\n` +
                        `?ÖÎç∞?¥Ìä∏Î•??§Ïö¥Î°úÎìú?òÏãúÍ≤†Ïäµ?àÍπå?`
                    );
                    
                    if (shouldDownload) {
                        this.downloadUpdate(result.result);
                    }
                } else if (result && result.success && !result.result) {
                    console.log('?ÖÎç∞?¥Ìä∏Í∞Ä ?ÜÏäµ?àÎã§.');
                    alert('?¥Î? ÏµúÏã† Î≤ÑÏ†Ñ?ÖÎãà??');
                } else {
                    console.error('?ÖÎç∞?¥Ìä∏ ?ïÏù∏ ?§Ìå®:', result ? result.error : '?????ÜÎäî ?§Î•ò');
                    alert('?ÖÎç∞?¥Ìä∏ ?ïÏù∏???§Ìå®?àÏäµ?àÎã§.');
                }
            } catch (error) {
                console.error('?ÖÎç∞?¥Ìä∏ ?ïÏù∏ Ï§??§Î•ò:', error);
                alert('?ÖÎç∞?¥Ìä∏ ?ïÏù∏ Ï§??§Î•òÍ∞Ä Î∞úÏÉù?àÏäµ?àÎã§.');
            }
        }
    }
    
    async downloadUpdate(updateInfo) {
        if (window.electronAPI) {
            try {
                const result = await window.electronAPI.downloadUpdate(updateInfo);
                if (result && result.success) {
                    console.log('?ÖÎç∞?¥Ìä∏ ?§Ïö¥Î°úÎìú ?ÑÎ£å:', result.filePath);
                    
                    const shouldInstall = confirm(
                        '?ÖÎç∞?¥Ìä∏Í∞Ä ?§Ïö¥Î°úÎìú?òÏóà?µÎãà??\n\n' +
                        'ÏßÄÍ∏??§Ïπò?òÏãúÍ≤†Ïäµ?àÍπå?'
                    );
                    
                    if (shouldInstall) {
                        this.installUpdate(result.filePath);
                    }
                } else {
                    console.error('?ÖÎç∞?¥Ìä∏ ?§Ïö¥Î°úÎìú ?§Ìå®:', result ? result.error : '?????ÜÎäî ?§Î•ò');
                    alert('?ÖÎç∞?¥Ìä∏ ?§Ïö¥Î°úÎìú???§Ìå®?àÏäµ?àÎã§.');
                }
            } catch (error) {
                console.error('?ÖÎç∞?¥Ìä∏ ?§Ïö¥Î°úÎìú Ï§??§Î•ò:', error);
                alert('?ÖÎç∞?¥Ìä∏ ?§Ïö¥Î°úÎìú Ï§??§Î•òÍ∞Ä Î∞úÏÉù?àÏäµ?àÎã§.');
            }
        }
    }
    
    async installUpdate(filePath) {
        if (window.electronAPI) {
            try {
                const result = await window.electronAPI.installUpdate(filePath);
                if (result && result.success) {
                    console.log('?ÖÎç∞?¥Ìä∏ ?§Ïπò ?úÏûë');
                } else {
                    console.error('?ÖÎç∞?¥Ìä∏ ?§Ïπò ?§Ìå®:', result ? result.error : '?????ÜÎäî ?§Î•ò');
                    alert('?ÖÎç∞?¥Ìä∏ ?§Ïπò???§Ìå®?àÏäµ?àÎã§.');
                }
            } catch (error) {
                console.error('?ÖÎç∞?¥Ìä∏ ?§Ïπò Ï§??§Î•ò:', error);
                alert('?ÖÎç∞?¥Ìä∏ ?§Ïπò Ï§??§Î•òÍ∞Ä Î∞úÏÉù?àÏäµ?àÎã§.');
            }
        }
    }
    
    showUpdateButton() {
        const updateBtn = document.getElementById('update-btn');
        if (updateBtn) {
            updateBtn.style.display = 'inline-block';
        }
    }
    
    hideUpdateButton() {
        const updateBtn = document.getElementById('update-btn');
        if (updateBtn) {
            updateBtn.style.display = 'none';
        }
    }
}

// ??Ï¥àÍ∏∞??
document.addEventListener('DOMContentLoaded', () => {
    // ?∏ÏÖò ?Ä?¥Î®∏ ?úÏûë
    const sessionTimer = new SessionTimer();
    
    // ?êÎèô Î°úÍ∑∏??Îß§Îãà?Ä ?úÏûë
    const autoLoginManager = new AutoLoginManager();
    
    // AutoLoginManager Ï¥àÍ∏∞???ÑÎ£å ??Î°úÍ∑∏???§Ï†ï ?ïÏù∏
    setTimeout(async () => {
        // ?§Ï†ï??Î°úÎìú???åÍπåÏßÄ ?ÄÍ∏?
        if (autoLoginManager.config) {
            console.log('?§Ï†ï Î°úÎìú??', autoLoginManager.config);
            

        }
    }, 1000); // 1Ï¥??ÄÍ∏?
    
    // Electron APIÍ∞Ä ?¨Ïö© Í∞Ä?•Ìïú Í≤ΩÏö∞
    if (window.electronAPI) {
        // ?∏ÏÖò ?ïÎ≥¥ Í∞Ä?∏Ïò§Í∏?
        window.electronAPI.getSessionInfo().then(info => {
            if (info) {
                sessionTimer.sessionTimeout = info.timeout;
                sessionTimer.warningTime = info.warningTime;
            }
        });
        
        // ?¨Ïö©???úÎèô ???Ä?¥Î®∏ ?¨ÏÑ§??
        window.electronAPI.onUserActivity(() => {
            sessionTimer.resetTimer();
        });
    }
    
            // ?πÎ∑∞ ?§Ï†ï
        const webview = document.getElementById('portal-webview');
        if (webview) {
          // ?πÎ∑∞ ?§Ï†ï
          webview.setAttribute('webpreferences', 'contextIsolation=yes, nodeIntegration=no');
          
                    // Î°úÎî© ?∏ÎîîÏºÄ?¥ÌÑ∞
          webview.addEventListener('did-start-loading', () => {
            console.log('?πÎ∑∞ Î°úÎî© ?úÏûë');
            // Î°úÎî© ?úÏûë ??Ï≤òÎ¶¨
          });
        
        webview.addEventListener('did-finish-load', () => {
            // Î°úÎî© ?ÑÎ£å ???êÎèô Î°úÍ∑∏???úÎèÑ (Î°úÍ∑∏???±Í≥µ?òÏ? ?äÏ? Í≤ΩÏö∞?êÎßå)
            if (autoLoginManager.config && autoLoginManager.config.autoLogin && !autoLoginManager.loginSuccess) {
                autoLoginManager.performAutoLogin();
            }
        });
        
        webview.addEventListener('did-fail-load', (event) => {
            console.error('?πÎ∑∞ Î°úÎî© ?§Ìå®:', event);
        });
    }
});

// ??Ï¢ÖÎ£å ???ïÎ¶¨
window.addEventListener('beforeunload', () => {
    // ?Ä?¥Î®∏ ?ïÎ¶¨
    if (window.sessionTimer) {
        window.sessionTimer.stopTimer();
    }
});

